//268. Missing Number
class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length; 
        int expectedTotal = (n*(n+1))/2;

        int total = 0;
        for(int num : nums)
        {
            total +=num;
        }
        return expectedTotal-total;
    }
}

//169. Majority element
class Solution {
    public int majorityElement(int[] nums) {
        int candidate = 0, count = 0;

        for(int num : nums)
        {
            if(count == 0)
            {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;

        }
        return candidate;
    }
}

//136. Single Number

class Solution {
    public int singleNumber(int[] nums) {
       int xor = 0; 
       for(int num : nums)
       {
        xor ^= num;
       
       }
       return xor;
    }
}

//2965 . find missing and repeated values

class Solution {
    public int[] findMissingAndRepeatedValues(int[][] grid) {
        int n = grid.length;
        int[] arr = new int[n*n];
        int[] result = new int[2];

        for(int i =0; i<n; i++)
        {
            for(int j = 0; j<n; j++)
            {
                arr[grid[i][j]-1]+=1;
            }
        }
        for(int i =0; i<arr.length; i++)
        {
            if(arr[i]==2) result[0]=i+1;
            else if(arr[i]==0) result[1]=i+1;
        }
        return result;
    }
}

